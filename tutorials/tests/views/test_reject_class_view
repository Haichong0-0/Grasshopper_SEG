from django.test import TestCase
from django.urls import reverse
from rest_framework.test import APIClient
from rest_framework import status
from tutorials.models import Lesson, Tutor, Student,Admin
from django.contrib.auth import get_user_model

User = get_user_model()

class RejectClassViewTests(TestCase):
    def setUp(self):
        self.client = APIClient()
        self.admin_user = Admin.objects.create_user(username='admin', password='adminpass', type_of_user='admin')
        self.student_user = Student.objects.create_user(username='student', password='studentpass', type_of_user='student')
        self.tutor_user = Tutor.objects.create_user(username='tutor', password='tutorpass', type_of_user='tutor')
        self.lesson = Lesson.objects.create(
            lesson_id=1,
            student=self.student_user.student,
            subject='Math',
            duration=60,
            start_time=datetime.now().time(),
            day_of_week='Monday',
            term='Fall'
        )
        self.url = reverse('reject_class', args=[self.lesson.lesson_id])
        self.client.force_authenticate(user=self.admin_user)

    def test_reject_lesson_success(self):
        response = self.client.post(self.url, {'reason': 'Not available'})
        self.lesson.refresh_from_db()
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(self.lesson.status, 'Rejected')

    def test_reject_lesson_invalid_data(self):
        response = self.client.post(self.url, {'reason': ''})
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_reject_lesson_without_authentication(self):
        self.client.force_authenticate(user=None)
        response = self.client.post(self.url, {'reason': 'Not available'})
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)